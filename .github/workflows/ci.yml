name: CI/CD for Task Files

on:
  push:
    paths:
      - '**/devops_*.php'
  pull_request:
    paths:
      - '**/devops_*.php'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install dependencies
        run: composer install

      - name: List files in workspace
        run: Get-ChildItem -Recurse

      - name: Ensure tests directory exists
        run: |
          if (-Not (Test-Path -Path "tests")) {
            Write-Host "Tests directory not found! Creating directory."
            New-Item -ItemType Directory -Path "tests"
          } else {
            Write-Host "Tests directory exists."
          }

      - name: Identify changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          files: '**/devops_*.php'

      - name: Run tests on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          $changedFiles = "${{ steps.changed-files.outputs.all_changed_files }}"
          $changedFiles -split "`n" | ForEach-Object {
            Write-Host "Testing $_"
            php -l $_
            if (Select-String -Pattern '<?php' -Path $_ -Quiet -SimpleMatch -List) {
              Write-Host "PHP opening and closing tags found in $_"
            } else {
              Write-Host "PHP opening or closing tag not found in $_"
              exit 1
            }
            if (Select-String -Pattern 'function' -Path $_ -Quiet -SimpleMatch -List) {
              Write-Host "PHP functions found in $_"
            } else {
              Write-Host "No PHP functions found in $_, but continuing..."
            }
          }

      - name: Run unit tests
        run: vendor/bin/phpunit --configuration phpunit.xml

      - name: Build project
        run: Compress-Archive -Path * -DestinationPath project.zip

      - name: Deploy locally
        run: powershell -File deploy.ps1

      - name: Generate deployment report
        run: |
          "Deployment Report" | Out-File -FilePath report.txt
          "Date: $(Get-Date)" | Out-File -FilePath report.txt -Append
          "Files deployed:" | Out-File -FilePath report.txt -Append
          $changedFiles | Out-File -FilePath report.txt -Append

      - name: Save deployment report
        uses: actions/upload-artifact@v2
        with:
          name: deployment-report
          path: report.txt
