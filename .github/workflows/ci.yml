name: CI/CD for Task Files

on:
  push:
    paths:
      - '**/devops_*.php'
    branches:
      - main  # Replace with your branch name if different

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2.21'

      - name: Install dependencies
        run: composer install

      - name: Install PHPUnit
        run: composer require --dev phpunit/phpunit

      - name: Find latest devops file
        id: find_latest_file
        run: |
          task_id="105"  # Replace this with the actual task ID or dynamically fetch it
          code_id="170"  # Replace this with the actual code ID or dynamically fetch it
          publish_type="front"  # Replace this with the actual publish type or dynamically fetch it

          latest_file=$(find . -type f -name "devops_*_${task_id}_${code_id}_${publish_type}.php" | sort -r | head -n 1)
          echo "LATEST_FILE=$latest_file" >> $GITHUB_ENV

      - name: Display latest file for debugging
        run: |
          echo "Latest file: $LATEST_FILE"
        env:
          LATEST_FILE: ${{ env.LATEST_FILE }}

      - name: Validate PHP file structure
        run: |
          if [ ! -f "$LATEST_FILE" ]; then
            echo "File $LATEST_FILE does not exist."
            exit 1
          fi

          if ! grep -q "<?php" "$LATEST_FILE"; then
            echo "File $LATEST_FILE does not contain PHP opening tag."
            exit 1
          fi

          if ! grep -q "?>" "$LATEST_FILE"; then
            echo "File $LATEST_FILE does not contain PHP closing tag."
            exit 1
          fi

          echo "File $LATEST_FILE contains valid PHP tags."
        env:
          LATEST_FILE: ${{ env.LATEST_FILE }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.LATEST_FILE }}
          asset_name: $(basename ${{ env.LATEST_FILE }})
          asset_content_type: application/php
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Clear LATEST_FILE
        run: |
          echo "LATEST_FILE=" >> $GITHUB_ENV
